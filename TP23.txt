.equ DDRA=0x01
.equ PORTA = 0x02

.equ DDRB = 0x04
.equ PORTB = 0x05

.equ DDRD = 0x0A
.equ PORTD = 0x0B

.equ EIMSK = 0x3D
.equ EICRA = 0x69

.equ WDTCSR = 0x60

.org 0x0000
	jmp setup

.org 0x0002
	JMP IRQ_plus10
	
.org 0x0004
	JMP IRQ_plus1
	
.org 0x0006
	JMP IRQ_marche

.org 0x0008
	JMP IRQ_arret	


.org 0x0018
	JMP IRQ_WD
	
.org 0x0080

codeAff: .DB 0b01111110, 0b00001100, 0b00110111, 0b00011111, 0b01001101, 0b01011011, 0b01111011, 0b00001110, 0b01111111, 0x5f, 0b01101111, 0b01111001, 0b00110001, 0b00111101, 0b01110011, 0b01100011

setup:
	DDRA@IO <- 0xFF
	PORTA@IO <- 0x00
	DDRB@IO <- 0xFF
	PORTB@IO <- 0x00
	DDRD@IO <- 0x80
	PORTD@IO <- 0x00
	
	EIMSK <- 0x0F
	EICRA <- 0xFF
	sei
	
	CLR r20
	CLR r21
	portA@IO <- 0xFF
	
boucle:
	CALL affiche
	jmp boucle
	
IRQ_WD:
	si (r20 == 0) alors saut res
		DEC r20
		reti
	res:
		si (r21 == 0) saut reset
		r20 <- 9
		DEC r21
		reti
	reset:
		CLR r21
		CLR r20
		WDTCSR <- 0x10
		WDTCSR <- 0x00
		PORTD@IO <- 0x00
	end:	
	reti
	
IRQ_plus10:
	si (r21 >= 9) alors saut end10
	INC r21
	end10:
	reti

IRQ_plus1:
	si (r20 >= 9) alors saut res1
		INC r20
		reti
	res1:
	si (r21 >= 9) alors saut end1
		CLR r20
		INC r21
	end1:	
	reti
	

IRQ_marche:
	WDTCSR <- 0x10
	WDTCSR <- 0b01000110
	PORTD@IO <- 0x80
	reti
	
IRQ_arret:
	WDTCSR <- 0x10
	WDTCSR <- 0x00
	PORTD@IO <- 0x00
	reti

affiche:
	PORTB@IO <- codeAff@ROM[r20]
	PORTA@IO <- codeAff@ROM[r21]
	ret
	